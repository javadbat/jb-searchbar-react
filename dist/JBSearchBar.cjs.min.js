'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var mobx = require('mobx');
var JBSelectBoxData = _interopDefault(require('jb-selectbox-react/dist/JBSelectBoxData.cjs.min'));
var JBSelectBox = _interopDefault(require('jb-selectbox-react/dist/JBSelectBox.cjs.min'));
var mobxReact = require('mobx-react');
var JBDateInput = _interopDefault(require('jb-dateinput-react/dist/JBDateInput.cjs.min'));

var _class, _descriptor, _temp;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
var JBSearchBarData = (_class = (_temp =
function () {
  function JBSearchBarData() {
    _classCallCheck(this, JBSearchBarData);
    this.typesArray = [{
      name: "number"
    }, {
      name: "text"
    }, {
      name: "date"
    }, {
      name: "list"
    }];
    _initializerDefineProperty(this, "columns", _descriptor, this);
    this.triggers = {
      focus: undefined,
      injectFilter: undefined
    };
    this.callBacks = {
      onChange: undefined,
      oncolumnSelect: undefined,
      onHeightOverflow: undefined,
      onHeightChange: undefined
    };
    this.searchOnChange = true;
    this.captions = {
      unknownSelectedOptionCaption: "ستون نامشخص",
      unknownSelectedOptionValue: "مقدار نا مشخص"
    };
    this.value = [];
    this.defaultValues = [
    ];
  }
  _createClass(JBSearchBarData, [{
    key: "checkColumnsValidation",
    value: function checkColumnsValidation(col) {
    }
  }]);
  return JBSearchBarData;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "columns", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [
    ];
  }
})), _class);

var _class$1, _descriptor$1, _descriptor2, _descriptor3, _temp$1;
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _initializerDefineProperty$1(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
var JBSearchBarService = (_class$1 = (_temp$1 =
function () {
  function JBSearchBarService(props) {
    var _this = this;
    _classCallCheck$1(this, JBSearchBarService);
    this.columnSelectConfig = new JBSelectBoxData();
    _initializerDefineProperty$1(this, "intentColumn", _descriptor$1, this);
    _initializerDefineProperty$1(this, "intentValue", _descriptor2, this);
    _initializerDefineProperty$1(this, "filterList", _descriptor3, this);
    this.defaultConfig = new JBSearchBarData();
    this.config = null;
    this.elements = {
      spinnerLine: React.createRef(),
      spinnerBox: React.createRef(),
      valueTextInput: React.createRef(),
      valueNumberInput: React.createRef(),
      valueDateInput: React.createRef(),
      valueListInput: React.createRef(),
      filterDynamicWrapper: React.createRef(),
      filterInputWrapper: React.createRef()
    };
    this.onSearch = null;
    this.isLoading = false;
    this.searchBarHeight = 45;
    this._isComponentMounted = false;
    this.onSearch = props.onSearch || this.onLackofOnSearch;
    this.config = this.mergeObject(props.config, this.defaultConfig);
    this.filterList = this.config.value;
    this.columnSelectConfig.options = this.config.columns;
    this.columnSelectConfig.placeHolder = "فیلد جستجو را مشخص کنید";
    this.columnSelectConfig.allowNull = false;
    this.config.triggers.focus = function () {
      _this.searchBarFocus();
    };
    this.config.triggers.injectFilter = function (injectFilterObj) {
      _this.injectFilterToList(injectFilterObj);
    };
    this.implementDefualtFilterValues();
  }
  _createClass$1(JBSearchBarService, [{
    key: "onComponentDidMount",
    value: function onComponentDidMount() {
      this._isComponentMounted = true;
      this.manageHiddenColumn();
    }
  }, {
    key: "onLackofOnSearch",
    value: function onLackofOnSearch() {
      console.warn("there is no \"onSearch\" prop defined for jb-searchbar and its wierd! ");
    }
  }, {
    key: "implementDefualtFilterValues",
    value: function implementDefualtFilterValues() {
      var _this2 = this;
      this.config.defaultValues.forEach(function (filterObj, index, list) {
        var callOnSeach = index == list.length - 1;
        _this2.injectFilterToList(filterObj, callOnSeach);
      });
    }
  }, {
    key: "mergeObject",
    value: function mergeObject(inputConfig, defaultConfig) {
      var addedProperty = {};
      for (var prop in defaultConfig) {
        if (inputConfig[prop] == undefined || inputConfig[prop] == null) {
          addedProperty[prop] = defaultConfig[prop];
        }
      }
      mobx.extendObservable(inputConfig, addedProperty);
      return inputConfig;
    }
  }, {
    key: "onFilterListChange",
    value: function onFilterListChange() {
      this.callOnChange();
      if (this.config.searchOnChange == true) {
        this.startSearch();
      }
    }
  }, {
    key: "callOnChange",
    value: function callOnChange() {
      if (typeof this.config.callBacks.onChange == "function") {
        this.config.callBacks.onChange();
      }
    }
  }, {
    key: "onColumnSelected",
    value: function onColumnSelected(event) {
      var _this3 = this;
      this.selectColumn(event.detail.newValueObject);
      this.columnSelectConfig.triggers.resetStates();
      setTimeout(function () {
        return _this3.autoSize();
      }, 0);
    }
  }, {
    key: "selectColumn",
    value: function selectColumn(column) {
      if (typeof this.config.callBacks.oncolumnSelect == "function") {
        this.config.callBacks.oncolumnSelect(column);
      }
      this.intentColumn = column;
    }
  }, {
    key: "onListValueSelected",
    value: function onListValueSelected(event) {
      var filterColumn = this.intentColumn;
      this.intentValue.caption = event.detail.newValueObject[filterColumn.config.fieldsNames.caption] || this.config.captions.unknownSelectedOptionCaption;
      if (event.detail.newValueObject[filterColumn.config.fieldsNames.value] != null && event.detail.newValueObject[filterColumn.config.fieldsNames.value] != undefined) {
        this.intentValue.value = event.detail.newValueObject[filterColumn.config.fieldsNames.value];
      } else {
        this.intentValue.value = this.config.captions.unknownSelectedOptionValue;
      }
      this.intentValue.isValid = true;
    }
  }, {
    key: "onTextValueChange",
    value: function onTextValueChange(event) {
      var value = event.target.value;
      this.intentValue.caption = value;
      this.intentValue.value = value;
      this.intentValue.isValid = value.trim().length > 0 ? true : false;
      return true;
    }
  }, {
    key: "onNumberValueChange",
    value: function onNumberValueChange(event) {
      var value = event.target.value;
      this.intentValue.caption = value;
      this.intentValue.value = value;
      this.intentValue.isValid = value != "" ? true : false;
      return true;
    }
  }, {
    key: "onDateValueChange",
    value: function onDateValueChange(event) {
      this.intentValue.value = event.target.value;
      this.intentValue.caption = event.detail.jalaliDateObj.year + "/" + event.detail.jalaliDateObj.month + "/" + event.detail.jalaliDateObj.day;
      this.intentValue.isValid = event.detail.isValid;
      this.intentValue.errorMessage = event.detail.errorMessage;
    }
  }, {
    key: "manageHiddenColumn",
    value: function manageHiddenColumn() {
      var _this4 = this;
      this.config.columns.forEach(function (column) {
        if (!column.maxUsageCount) {
          column.maxUsageCount = Infinity;
        }
        var usedCount = _this4.filterList.filter(function (x) {
          return x.column.id == column.id;
        }).length;
        if (column.maxUsageCount > usedCount) {
          column.JBSelectBoxDetail.externalHidden = false;
        } else {
          column.JBSelectBoxDetail.externalHidden = true;
        }
      });
    }
  }, {
    key: "confirmIntent",
    value: function confirmIntent() {
      if (this.intentValue.isValid == true) {
        var filterObject = {
          columnCaption: this.intentColumn.caption,
          valueCaption: this.intentValue.caption,
          column: _objectSpread({}, this.intentColumn),
          value: _objectSpread({}, this.intentValue)
        };
        this._addFilterToList(filterObject);
        this.resetIntent();
      } else {
        if (this.intentValue.errorMessage && this.intentValue.errorMessage != '') {
          alert(this.intentValue.errorMessage);
        } else {
          alert("مقدار وارد شده صحیح نمیباشد");
        }
      }
    }
  }, {
    key: "injectFilterToList",
    value: function injectFilterToList(injectFilterObj) {
      var callOnChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var findedColumn = this.config.columns.find(function (x) {
        return x.id == injectFilterObj.columnId;
      });
      if (_typeof(findedColumn) != "object") {
        console.error('the filter you intended to add has invalid "columnId"');
        return false;
      }
      var filterObj = {
        columnCaption: findedColumn.caption,
        valueCaption: injectFilterObj.valueCaption,
        column: findedColumn,
        value: {
          caption: injectFilterObj.valueCaption,
          value: injectFilterObj.value,
          isValid: true
        }
      };
      this._addFilterToList(filterObj, callOnChange);
    }
  }, {
    key: "_addFilterToList",
    value: function _addFilterToList(filterObject) {
      var _this5 = this;
      var callOnChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.filterList.push(filterObject);
      if (this._isComponentMounted) {
        this.manageHiddenColumn();
      }
      if (callOnChange) {
        this.onFilterListChange();
      }
      setTimeout(function () {
        return _this5.autoSize();
      }, 0);
    }
  }, {
    key: "removeFilterFromList",
    value: function removeFilterFromList(item, index) {
      var _this6 = this;
      this.filterList.splice(index, 1);
      this.onFilterListChange();
      this.manageHiddenColumn();
      setTimeout(function () {
        return _this6.autoSize();
      }, 0);
    }
  }, {
    key: "cancelIntentColumn",
    value: function cancelIntentColumn() {
      this.resetIntent();
    }
  }, {
    key: "resetIntent",
    value: function resetIntent() {
      this.intentValue = {
        caption: '',
        value: null,
        isValid: false
      };
      switch (this.intentColumn.type) {
        case 'list':
          break;
        case 'text':
          break;
        case 'number':
          break;
        case 'date':
          break;
      }
      this.intentColumn = null;
    }
  }, {
    key: "onFilterBtnClick",
    value: function onFilterBtnClick(event) {
      if (this.intentValue.isValid == true) {
        this.confirmIntent();
      }
      if (this.isLoading) {
        return;
      }
      this.startSearch();
    }
  }, {
    key: "startSearch",
    value: function startSearch() {
      if (this._isComponentMounted) {
        this.callOnSearchCallBack();
        this.playSearchIconAnimation();
      }
    }
  }, {
    key: "playSearchIconAnimation",
    value: function playSearchIconAnimation() {
      var context = this;
      var ShrinkLineAnimation = this.elements.spinnerLine.current.animate([{
        d: 'path("M400 400 L 450 450")'
      }, {
        d: 'path("M410 410 L 415 415")'
      }], {
        id: 'ShrinkLine',
        duration: 400
      });
      ShrinkLineAnimation.cancel();
      var shrinkLineFunction = function shrinkLineFunction(animation) {
        context.elements.spinnerLine.current.setAttribute("d", "M 407.82484150097946 413.25475607450323 A 220 220 0 0 0 413.25475607450323 407.8248415009794");
        curveLineAnimation.play();
      };
      ShrinkLineAnimation.onfinish = shrinkLineFunction;
      var curveLineAnimation = this.elements.spinnerLine.current.animate([{
        d: 'path("M 407.82484150097946 413.25475607450323 A 220 220 0 0 0 413.25475607450323 407.8248415009794")'
      }, {
        d: 'path("M 255 475 A 220 220 0 0 0 475 255")'
      }], {
        id: 'CurveLine',
        duration: 400
      });
      curveLineAnimation.cancel();
      var curveLineFunction = function curveLineFunction(animation) {
        context.elements.spinnerLine.current.setAttribute("d", "M 255 475 A 220 220 0 0 0 475 255");
        spinAnimation.play();
      };
      curveLineAnimation.onfinish = curveLineFunction;
      var spinAnimation = this.elements.spinnerBox.current.animate([{
        transform: 'rotate(0deg)'
      }, {
        transform: 'rotate(180deg)'
      }, {
        transform: 'rotate(360deg)'
      }], {
        id: 'Spin',
        duration: 1000,
        iterations: 1
      });
      spinAnimation.cancel();
      var spinFunction = function spinFunction(animation) {
        if (context.isLoading == true) {
          spinAnimation.play();
        } else {
          ReversecurveLineAnimation.play();
        }
      };
      spinAnimation.onfinish = spinFunction;
      var growLineAnimation = this.elements.spinnerLine.current.animate([{
        d: 'path("M410 410 L 415 415")'
      }, {
        d: 'path("M400 400 L 450 450")'
      }], {
        id: 'GrowLine',
        uration: 400
      });
      growLineAnimation.cancel();
      var growLineFunction = function growLineFunction(animation) {
        context.elements.spinnerLine.current.setAttribute("d", "M400 400 L 450 450");
      };
      growLineAnimation.onfinish = growLineFunction;
      var ReversecurveLineAnimation = this.elements.spinnerLine.current.animate([{
        d: 'path("M 255 475 A 220 220 0 0 0 475 255")'
      }, {
        d: 'path("M 407.82484150097946 413.25475607450323 A 220 220 0 0 0 413.25475607450323 407.8248415009794")'
      }], {
        id: 'ReverseCurveLine',
        duration: 400
      });
      ReversecurveLineAnimation.cancel();
      var ReversecurveLineFunction = function ReversecurveLineFunction(animation) {
        context.elements.spinnerLine.current.setAttribute("d", "M410 410 L 415 415");
        growLineAnimation.play();
      };
      ReversecurveLineAnimation.onfinish = ReversecurveLineFunction;
      ShrinkLineAnimation.play();
    }
  }, {
    key: "callOnSearchCallBack",
    value: function callOnSearchCallBack() {
      var _this7 = this;
      this.isLoading = true;
      var searchPromise = this.onSearch(this.filterList);
      if (Promise.resolve(searchPromise) == searchPromise) {
        searchPromise.then(function (e) {
          _this7.isLoading = false;
        }).catch(function (e) {
          _this7.isLoading = false;
        });
      } else {
        this.isLoading = false;
      }
    }
  }, {
    key: "onValueInputTextKeyUp",
    value: function onValueInputTextKeyUp(e) {
      if (e.keyCode == 13) {
        this.confirmIntent();
      }
    }
  }, {
    key: "searchBarFocus",
    value: function searchBarFocus() {
      if (!this.intentColumn) {
        this.columnSelectConfig.triggers.focus();
      }
    }
  }, {
    key: "autoSize",
    value: function autoSize() {
      var InputTop = this.elements.filterInputWrapper.current.offsetTop;
      var searcBarTop = this.elements.filterDynamicWrapper.current.offsetTop;
      var searchBarHeight = InputTop - searcBarTop + 45;
      if (searchBarHeight != this.searchBarHeight) {
        this.searchBarHeight = searchBarHeight;
        if (typeof this.config.callBacks.onHeightChange == "function") {
          this.config.callBacks.onHeightChange(searchBarHeight);
        }
      }
      if (InputTop > searcBarTop) {
        if (typeof this.config.callBacks.onHeightOverflow == "function") {
          this.config.callBacks.onHeightOverflow(searchBarHeight);
        }
      }
    }
  }, {
    key: "onDateInputSubmit",
    value: function onDateInputSubmit(e) {
      this.confirmIntent();
    }
  }]);
  return JBSearchBarService;
}(), _temp$1), (_descriptor$1 = _applyDecoratedDescriptor$1(_class$1.prototype, "intentColumn", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor2 = _applyDecoratedDescriptor$1(_class$1.prototype, "intentValue", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      caption: '',
      value: null,
      isValid: false,
      errorMessage: ''
    };
  }
}), _descriptor3 = _applyDecoratedDescriptor$1(_class$1.prototype, "filterList", [mobx.observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [
    ];
  }
})), _class$1);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === 'undefined') { return; }
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".jb-search-bar-component{height:auto;min-height:48px}.jb-search-bar-component .filter-dynamic-wrapper{height:100%;width:calc(100% - 45px);float:right}.jb-search-bar-component .filter-dynamic-wrapper .filter-list-section{display:inline}.jb-search-bar-component .filter-dynamic-wrapper .filter-list-section .item{float:right;background-color:#039be5;margin:6px 4px;padding:2px 8px 2px 16px;border-radius:22px;color:#fff;height:32px;font-size:12px}.jb-search-bar-component .filter-dynamic-wrapper .filter-list-section .item span{display:block;float:right;padding:8px 0}.jb-search-bar-component .filter-dynamic-wrapper .filter-list-section .item .close-icon{margin-top:0px;box-sizing:border-box;width:24px;height:13px}.jb-search-bar-component .filter-dynamic-wrapper .filter-list-section .item .close-icon svg{width:20px;height:15px;fill:#2c3039;cursor:pointer}.jb-search-bar-component .filter-dynamic-wrapper .filter-input-section{display:inline-block;height:45px}.jb-search-bar-component .filter-input-section{float:right}.jb-search-bar-component .filter-input-section .column-list-wrapper{float:right;height:100%}.jb-search-bar-component .filter-input-section .intent-wrapper{float:right}.jb-search-bar-component .filter-input-section .intent-wrapper .intent-column{float:right;display:inline-block;font-size:18px;margin:12px 8px 12px 8px;color:#585858;font-weight:600}.jb-search-bar-component .filter-input-section .intent-wrapper .input-field-wrapper{float:right;height:45px}.jb-search-bar-component .filter-input-section .intent-wrapper .input-field-wrapper .list-input{height:100%}.jb-search-bar-component .filter-input-section .intent-wrapper .input-field-wrapper .text-input input{height:45px;background:#ffffff;border:none;box-sizing:border-box;border-bottom:3px solid #e0e0e0;font-size:14px;outline:none}.jb-search-bar-component .filter-input-section .intent-wrapper .input-field-wrapper .date-input{border:none}.jb-search-bar-component .filter-input-section .intent-wrapper .input-field-wrapper .date-input .jb-date-input-component{height:45px}.jb-search-bar-component .filter-input-section .intent-wrapper .confirm-btn{width:32px;float:right;padding:5px 0 3px 0}.jb-search-bar-component .filter-input-section .intent-wrapper .confirm-btn.active{cursor:pointer}.jb-search-bar-component .filter-input-section .intent-wrapper .confirm-btn.active svg{fill:green}.jb-search-bar-component .filter-input-section .intent-wrapper .confirm-btn svg{fill:#e2e2e2}.jb-search-bar-component .filter-input-section .intent-wrapper .cancel-btn{width:12px;float:right;margin:16px 8px 0px 0px;cursor:pointer}.jb-search-bar-component .filter-btn{height:45px;width:45px;float:left}.jb-search-bar-component .filter-btn svg{width:36px;height:36px;margin:4px 8px;box-sizing:border-box}.jb-search-bar-component .filter-btn svg circle{stroke:#7b7b7b;fill:white;stroke-width:25px}.jb-search-bar-component .filter-btn svg g.spin-line-group{transform-origin:center}.jb-search-bar-component .filter-btn svg g.spin-line-group rect{fill:transparent}.jb-search-bar-component .filter-btn svg path{fill:none;stroke:#9b9b9b;stroke-linecap:round;stroke-linejoin:round;transition:0.2s;stroke-width:35px;transform-origin:center}.jb-search-bar-component .filter-btn{cursor:pointer}\n";
styleInject(css);

var _class$2;
function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }
function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var JBSearchBar = mobxReact.observer(_class$2 =
function (_React$Component) {
  _inherits(JBSearchBar, _React$Component);
  function JBSearchBar(props) {
    var _this;
    _classCallCheck$2(this, JBSearchBar);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(JBSearchBar).call(this, props));
    _this.service = new JBSearchBarService(props);
    return _this;
  }
  _createClass$2(JBSearchBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.service.onComponentDidMount();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      return React.createElement("div", {
        className: "jb-search-bar-component " + (this.props.className != undefined ? this.props.className : '')
      }, React.createElement("section", {
        className: "filter-dynamic-wrapper",
        ref: this.service.elements.filterDynamicWrapper
      }, React.createElement("section", {
        className: "filter-list-section"
      }, this.service.filterList.map(function (item, index) {
        return React.createElement("div", {
          className: "item",
          key: "index"
        }, React.createElement("span", {
          className: "close-icon",
          onClick: function onClick(e) {
            return _this2.service.removeFilterFromList(item, index);
          }
        }, React.createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          height: "32",
          id: "close",
          viewBox: "0 0 32 32",
          width: "32"
        }, React.createElement("path", {
          d: "M4 8 L8 4 L16 12 L24 4 L28 8 L20 16 L28 24 L24 28 L16 20 L8 28 L4 24 L12 16 z"
        }))), React.createElement("span", null, item.columnCaption, "\xA0:\xA0"), React.createElement("span", null, item.valueCaption));
      })), React.createElement("section", {
        className: "filter-input-section",
        ref: this.service.elements.filterInputWrapper
      },
      !this.service.intentColumn && React.createElement("div", {
        className: "column-list-wrapper"
      }, React.createElement(JBSelectBox, {
        config: this.service.columnSelectConfig,
        onChange: function onChange(e) {
          return _this2.service.onColumnSelected(e);
        }
      })),
      this.service.intentColumn && React.createElement("div", {
        className: "intent-wrapper"
      }, React.createElement("div", {
        className: "cancel-btn",
        onClick: function onClick() {
          _this2.service.cancelIntentColumn();
        }
      }, React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 378.303 378.303"
      }, React.createElement("polygon", {
        style: {
          fill: '#E04F5F'
        },
        points: "378.303,28.285 350.018,0 189.151,160.867 28.285,0 0,28.285 160.867,189.151 0,350.018   28.285,378.302 189.151,217.436 350.018,378.302 378.303,350.018 217.436,189.151 "
      }))), React.createElement("div", {
        className: "intent-column"
      }, React.createElement("span", null, this.service.intentColumn.caption, ":\xA0")), React.createElement("div", {
        className: "input-field-wrapper"
      }, React.createElement(this.InputFieldWrapper, {
        column: this.service.intentColumn,
        value: this.service.intentValue,
        this: this.service
      })), React.createElement("div", {
        onClick: function onClick(e) {
          return _this2.service.confirmIntent(e);
        },
        className: "confirm-btn " + (this.service.intentValue && this.service.intentValue.isValid ? 'active' : '')
      }, React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        version: "1.1",
        id: "Layer_1",
        x: "0px",
        y: "0px",
        viewBox: "0 0 493.464 493.464",
        xlink: "http://www.w3.org/1999/xlink",
        space: "preserve"
      }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
        d: "M246.736,0C110.692,0,0.004,110.68,0.004,246.732c0,136.06,110.688,246.732,246.732,246.732    c136.048,0,246.724-110.672,246.724-246.732C493.456,110.68,382.78,0,246.736,0z M360.524,208.716L230.98,338.268    c-2.82,2.824-7.816,2.824-10.64,0l-86.908-86.912c-1.412-1.416-2.192-3.3-2.192-5.324c0.004-2.016,0.784-3.912,2.192-5.336    l11.108-11.104c1.412-1.408,3.3-2.18,5.328-2.18c2.016,0,3.908,0.772,5.316,2.18l67.752,67.752c1.5,1.516,3.94,1.516,5.444,0    l110.392-110.392c2.824-2.824,7.828-2.824,10.644,0l11.108,11.124c1.412,1.4,2.208,3.304,2.208,5.308    C362.732,205.412,361.936,207.3,360.524,208.716z"
      })))))))), React.createElement("section", {
        className: "filter-btn",
        onClick: function onClick(e) {
          return _this2.service.onFilterBtnClick(e);
        }
      }, React.createElement("svg", {
        viewBox: "0 0 512 512",
        xmlns: "http://www.w3.org/2000/svg"
      }, React.createElement("circle", {
        cx: "255",
        cy: "255",
        r: "170"
      }), React.createElement("g", {
        ref: this.service.elements.spinnerBox,
        className: "spin-line-group"
      }, React.createElement("rect", {
        x: "0",
        y: "0",
        width: "512",
        height: "512"
      }), React.createElement("path", {
        ref: this.service.elements.spinnerLine,
        className: "convertable-line",
        d: "M400 400 L 450 450"
      })))));
    }
  }, {
    key: "InputFieldWrapper",
    value: function InputFieldWrapper(input) {
      var column = input.column;
      var value = input.value;
      var context = input.this;
      var returnValue;
      switch (column.type) {
        case 'text':
          returnValue = React.createElement("div", {
            className: "text-input"
          }, React.createElement("input", {
            ref: context.elements.valueTextInput,
            onKeyUp: function onKeyUp(e) {
              return context.onValueInputTextKeyUp(e);
            },
            type: "text",
            onChange: function onChange(e) {
              return context.onTextValueChange(e);
            },
            autoFocus: true
          }));
          break;
        case 'number':
          returnValue = React.createElement("div", {
            className: "text-input"
          }, React.createElement("input", {
            type: "number",
            onChange: function onChange(e) {
              return context.onNumberValueChange(e);
            },
            onKeyUp: function onKeyUp(e) {
              return context.onValueInputTextKeyUp(e);
            },
            autoFocus: true
          }));
          break;
        case 'date':
          returnValue = React.createElement("div", {
            className: "date-input"
          }, React.createElement(JBDateInput, {
            config: column.config,
            onChange: function onChange(e) {
              return context.onDateValueChange(e);
            },
            autoFocus: true,
            onSubmit: function onSubmit(e) {
              context.onDateInputSubmit(e);
            }
          }));
          break;
        case 'list':
          input.column.config.value = context.intentValue;
          returnValue = React.createElement("div", {
            className: "list-input"
          }, React.createElement(JBSelectBox, {
            value: context.intentValue.value,
            config: input.column.config,
            onChange: function onChange(e) {
              context.onListValueSelected(e);
            },
            autoFocus: true
          }));
          break;
      }
      return returnValue;
    }
  }]);
  return JBSearchBar;
}(React.Component)) || _class$2;

module.exports = JBSearchBar;
