import { observable } from 'mobx';

var _class, _descriptor, _temp;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
var JBSearchBarData = (_class = (_temp =
function () {
  function JBSearchBarData() {
    _classCallCheck(this, JBSearchBarData);
    this.typesArray = [{
      name: "number"
    }, {
      name: "text"
    }, {
      name: "date"
    }, {
      name: "list"
    }];
    _initializerDefineProperty(this, "columns", _descriptor, this);
    this.triggers = {
      focus: undefined,
      injectFilter: undefined
    };
    this.callBacks = {
      onChange: undefined,
      oncolumnSelect: undefined,
      onHeightOverflow: undefined,
      onHeightChange: undefined
    };
    this.searchOnChange = true;
    this.captions = {
      unknownSelectedOptionCaption: "ستون نامشخص",
      unknownSelectedOptionValue: "مقدار نا مشخص"
    };
    this.value = [];
    this.defaultValues = [
    ];
  }
  _createClass(JBSearchBarData, [{
    key: "checkColumnsValidation",
    value: function checkColumnsValidation(col) {
    }
  }]);
  return JBSearchBarData;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "columns", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [
    ];
  }
})), _class);

export default JBSearchBarData;
